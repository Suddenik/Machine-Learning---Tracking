// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Prediction.Model;

namespace Prediction
{
    class Program
    {
        private static string DATA_TO_TRANSFORM;
        private static string TRAIN_DATA_FILEPATH; //= @"C:\Users\Patryk\Desktop\Machine Learning\FINAL_VER\tracking_dataOut_POLSKA_roznice_dat.csv";
        static string pathZIP = @"D:\Users\Suddi\Source\Repos\Machine-Learning---Tracking\PL.csv";
        private static string MODEL_FILEPATH = @"D:\Users\Suddi\Source\Repos\Machine-Learning---Tracking\Prediction.Model\MLModel.zip";

        private static MLContext mlContext = new MLContext(seed: 1);

        private static string DATA_FILEPATH_IN = @"C:\Users\Patryk\Desktop\Machine Learning\FINAL_VER\tracking_dataOut_POLSKA_in.csv";
        private static string DATA_FILEPATH_OUT;//= @"C:\Users\Patryk\Desktop\Machine Learning\FINAL_VER\tracking_dataOut_POLSKA_TEST.csv";
        private static long naglowki_ = 0;
        private static string data_zakupu = null;
        private static string data_obioru_przez_kuriera = null;
        private static string data_dostarczenia = null;
        private static double ilosc_godzin = 0;

        private static long counter = 0;
        private static long fileLength = -2;
        static List<string> naglowki = new List<string>();
        static List<int> dlugosciNaglowkow = new List<int>();
        private static int suggestedLineSize = 0;


        static void Main(string[] args)
        {
            Console.WriteLine("Co chcesz zrobiæ: " +
                "\n1 - przewidywanie dostarczenia paczki przez kuriera" +
                "\n2 - przekszta³cenie danych z pliku Ÿród³owego do postaci, któr¹ przyjmuje model w celu trenowania (mo¿e zaj¹æ du¿o czasu)" +
                "\n3 - trenowanie modelu na nowych danych" +
                "\n4 - wyœwietlenie dok³adnoœci dla modelu (mo¿e zaj¹æ du¿o czasu)\n\n");
            string choice = Console.ReadLine();
            if (choice.Equals("1"))
            {
                DATA_FILEPATH_OUT = Environment.CurrentDirectory;//przypisuje œcie¿kê do folderu projektu
                DATA_FILEPATH_OUT += @"\tracking_dataOut_POLSKA_TEST";
                Result();
            }
            else if (choice.Equals("2"))
            {
                Console.WriteLine("Podaj œcie¿kê do pliku .rpt z danymi Ÿród³owymi:");
                DATA_TO_TRANSFORM = Console.ReadLine();
                Console.WriteLine("Podaj œcie¿kê do zapisania przerobionego pliku w formacie .csv");
                TRAIN_DATA_FILEPATH = Console.ReadLine() + @"\tracking_dataOut_POLSKA_roznice_dat.csv";
                CrateOutputFile(TRAIN_DATA_FILEPATH);
                GatherFileData(DATA_TO_TRANSFORM, TRAIN_DATA_FILEPATH);
                CreateHeadersInOutput(TRAIN_DATA_FILEPATH);
                ConvertTry(2, DATA_TO_TRANSFORM, TRAIN_DATA_FILEPATH);
            }
            else if (choice.Equals("3"))
                CreateModel();
            else
                Console.WriteLine("Nieznana komenda");

            //CreateModel();
            //CrateOutputFile(DATA_FILEPATH_OUT);
            //Input(DATA_FILEPATH_OUT);
        }

        private static void CreateHeadersInOutput(string outputPath)
        {
            //TODO: przerobic naglowki na sztywno, bo i tak beda troche inne
            using (StreamWriter sw = File.AppendText(outputPath))
            {
                sw.WriteLine("TIME_BEFORE_COURIER_GET_PACKAGE;TIME_TO_DELIVER;ZIP_RECEIVER;ZIP_SENDER;DISTANCE");
            }
        }

        private static void GatherFileData(string inputFile, string outputPath)
        {
            try
            {
                string message = "";

                //zbieramy nazwy tabel
                using (StreamReader sr = File.OpenText(inputFile))
                {
                    string line = sr.ReadLine();
                    int iloscNaglowkow = 0;
                    foreach (var subline in line.Split((char[])null, StringSplitOptions.RemoveEmptyEntries))
                    {
                        naglowki.Add(subline);
                        iloscNaglowkow++;
                        //message += subline;
                    }

                    //zbieramy dlugosci tabel
                    line = sr.ReadLine();
                    int iloscdanych = 0;
                    foreach (var subline in line.Split(' '))
                    {
                        dlugosciNaglowkow.Add(subline.Length + 1);
                        iloscdanych++;
                        suggestedLineSize += subline.Length;
                    }
                }
            }
            catch (Exception e)
            {
                //
            }
        }


        private static void Result()
        {
            //CrateOutputFile(DATA_FILEPATH_IN);
            CrateOutputFile(DATA_FILEPATH_OUT);

            Input(DATA_FILEPATH_OUT);
            //ConvertToTest(DATA_FILEPATH_IN, DATA_FILEPATH_OUT);//jeœli to odkomentujesz to wtedy zakomentuj wy¿sze wywo³anie matody

            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH_OUT);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            double _data_dostarczenia = Double.Parse(data_dostarczenia);
            double _data_zakupu = Double.Parse(data_zakupu);
            double _data_odebrania = Double.Parse(data_obioru_przez_kuriera);
            double _przewidywana_data_dostarczenia = _data_odebrania + predictionResult.Score;

            DateTime prawdziwa_data_dostarczenia = UnixTimeStampToDateTime(_data_dostarczenia);
            DateTime prawdziwa_data_zakupu = UnixTimeStampToDateTime(_data_zakupu);
            DateTime prawdziwa_data_odebrania = UnixTimeStampToDateTime(_data_odebrania);
            DateTime przewidywana_data_dostarczenia = UnixTimeStampToDateTime(_przewidywana_data_dostarczenia);

            int mniej_wiecej = Convert.ToInt32(predictionResult.Score / 3600);

            Console.WriteLine();
            //Console.WriteLine("Using model to make single prediction -- Comparing actual TIME_TO_DELIVER with predicted TIME_TO_DELIVER from sample data...\n\n");
            //Console.WriteLine($"Data zakupu: {prawdziwa_data_zakupu}");
            //Console.WriteLine($"Data odbioru przez kuriera: {prawdziwa_data_odebrania}");
            Console.WriteLine($"Kod pocztowy odbiorcy: {sampleData.ZIP_RECEIVER}");
            Console.WriteLine($"Kod pocztowy nadawcy: {sampleData.ZIP_SENDER}");
            Console.WriteLine($"Dystans: {sampleData.DISTANCE}");
            //Console.WriteLine($"\nCzas dostawy: {sampleData.TIME_TO_DELIVER/3600} godzin\n\n");
            Console.WriteLine($"\nPrzewidywany czas dostawy: ~{mniej_wiecej} godzin\n\n");
            Console.WriteLine($"\n\nPrzewidywana data odbioru: {przewidywana_data_dostarczenia}\n\n");//Prawdziwa data odbioru {prawdziwa_data_dostarczenia}\n
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        public static DateTime UnixTimeStampToDateTime(double unixTimeStamp)
        {
            string date = unixTimeStamp.ToString();
            unixTimeStamp = Convert.ToDouble(date);

            // Unix timestamp is seconds past epoch
            System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
            return dtDateTime;
        }

        private static void Input(string output)
        {
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            bool isNumber;
            int result;
            int[] num = new int[3];

            using (StreamWriter sw = File.AppendText(output))
            {

                string line = "", tempLine = "";
                line = "TIME_BEFORE_COURIER_GET_PACKAGE;TIME_TO_DELIVER;ZIP_RECEIVER;ZIP_SENDER;DISTANCE";
                sw.WriteLine(line);

                //data zakupu
                Console.WriteLine("Podaj datê zakupu (format: " + dateFormat + "):");
                tempLine = Console.ReadLine();
                DateTime date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);//tylko godziny z danej daty - nie musimy znaæ czasu dostawy co do sekundy
                tempLine = ConvertToUnixTimestamp(date).ToString();//konwertowanie nie do ticków (du¿a liczba) a do czasu unixowego
                isNumber = Int32.TryParse(tempLine, out result);
                if (!isNumber)
                    Console.WriteLine("B£¥D KONWERSJI DATY ZAKUPU");
                tempLine = tempLine.Substring(0, tempLine.Length - 2);//usuniêcie dwóch ostatnich zer z unixtimestamp - ¿eby by³a mniejsza liczba przy uczeniu
                num[0] = result;

                //data odbioru przez kuriera
                Console.WriteLine("Podaj datê odbioru paczki przez kuriera (format: " + dateFormat + "):");
                tempLine = Console.ReadLine();
                date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);//tylko godziny z danej daty - nie musimy znaæ czasu dostawy co do sekundy
                tempLine = ConvertToUnixTimestamp(date).ToString();//konwertowanie nie do ticków (du¿a liczba) a do czasu unixowego
                isNumber = Int32.TryParse(tempLine, out result);
                if (!isNumber)
                    Console.WriteLine("B£¥D KONWERSJI DATY ODBIORU PACZKI");
                tempLine = tempLine.Substring(0, tempLine.Length - 2);//usuniêcie dwóch ostatnich zer z unixtimestamp - ¿eby by³a mniejsza liczba przy uczeniu
                num[1] = result;

                //*data odbioru dostarczenia paczki przez kuriera
                //Console.WriteLine("Podaj datê dostarczenia paczki przez kuriera (format: " + dateFormat + "):");
                //tempLine = Console.ReadLine();
                //date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                //date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);//tylko godziny z danej daty - nie musimy znaæ czasu dostawy co do sekundy
                //tempLine = ConvertToUnixTimestamp(date).ToString();//konwertowanie nie do ticków (du¿a liczba) a do czasu unixowego
                //isNumber = Int32.TryParse(tempLine, out result);
                //if (!isNumber)
                //    Console.WriteLine("B£¥D KONWERSJI DATY DOSTARCZENIA");
                //tempLine = tempLine.Substring(0, tempLine.Length - 2);//usuniêcie dwóch ostatnich zer z unixtimestamp - ¿eby by³a mniejsza liczba przy uczeniu
                //num[2] = result;

                //kod pocztowy odiorcy
                Console.WriteLine("Podaj kod pocztowy odbiory (format: XX-XXX):");
                string receiver = Console.ReadLine();

                //kod pocztowy nadawcy
                Console.WriteLine("Podaj kod pocztowy nadawcy (format: XX-XXX):");
                string sender = Console.ReadLine();

                //ró¿nica w datach
                int diff1 = 0, diff2 = 0;
                diff1 = num[1] - num[0];
                //diff2 = num[2] - num[1];

                //dystans miêdzy dwoma kodami pocztowymi
                string distance = DistanceBetweenTwoZIP(receiver, sender);


                if (diff1 > 0 /*&& diff2 > 0*/)
                {
                    data_zakupu = num[0].ToString();
                    data_obioru_przez_kuriera = num[1].ToString();
                    data_dostarczenia = num[2].ToString();
                    ilosc_godzin = diff2;
                    line = diff1.ToString() + ";" + /*diff2.ToString() +*/";" +
                        receiver.Replace("-", "") + ";" + sender.Replace("-", "") + ";" + distance.Replace(",", ".");
                    sw.WriteLine(line);
                }
                else
                    Console.WriteLine("B³¹d data odebrania paczki przez kuriera jest wczeœniejsza ni¿ data zakupu lub" +
                        "data dostarczenia jest wczeœniejsza ni¿ data odbioru");
            }
        }
        private static double ConvertToUnixTimestamp(DateTime date)
        {
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            TimeSpan diff = date.ToUniversalTime() - origin;
            return Math.Floor(diff.TotalSeconds);
        }

        private static string DistanceBetweenTwoZIP(string firstZIP, string secondZIP)
        {
            string distanceString = "0";
            string firstCoordinate = "", secondCoordinate = "";
            string[] words_1, words_2;
            int flag_1 = 0, flag_2 = 0;
            float firstLatitude = 0, firstLongtitude = 0, secondLatitude = 0, secondLongtitude = 0;
            var distance = 0.00;

            foreach (var line in File.ReadAllLines(pathZIP))
            {
                if (line.Contains(firstZIP) && flag_1 == 0)
                {
                    firstCoordinate = line;
                    words_1 = firstCoordinate.Split(null);
                    //firstCoordinate = words_1[1] +"||"+ words_1[2]+";";
                    firstLatitude = float.Parse(words_1[1], CultureInfo.InvariantCulture);
                    firstLongtitude = float.Parse(words_1[2], CultureInfo.InvariantCulture);

                    flag_1 = 1;
                }
                if (line.Contains(secondZIP) && flag_2 == 0)
                {
                    secondCoordinate = line;
                    words_2 = secondCoordinate.Split(null);
                    //secondCoordinate = words_2[1] + "||" + words_2[2];
                    secondLatitude = float.Parse(words_2[1], CultureInfo.InvariantCulture);
                    secondLongtitude = float.Parse(words_2[2], CultureInfo.InvariantCulture);

                    flag_2 = 1;
                }
                if (flag_1 == 1 && flag_2 == 1)
                {
                    distance = new Coordinates(firstLatitude, firstLongtitude)
                        .DistanceTo(
                        new Coordinates(secondLatitude, secondLongtitude),
                        UnitOfLength.Kilometers
                    );
                    break;
                }
            }
            distanceString = distance.ToString();
            //distanceString = firstCoordinate + secondCoordinate;
            //distanceString = firstLatitude.ToString() + "||" + firstLongtitude.ToString() +";" + secondLatitude.ToString() + "||" + secondLongtitude.ToString();
            return distanceString;
        }

        private static void ConvertToTest(string path, string path2)
        {
            using (StreamReader sr = File.OpenText(path))
            {
                using (StreamWriter sw = File.AppendText(path2))
                {
                    string line = "";
                    try
                    {
                        while ((line = sr.ReadLine()) != null)
                        {

                            if (line.Contains("NULL"))
                            {
                                continue;
                            }

                            //line = line.Split('.')[0].Trim();
                            if (naglowki_ != 0)
                            {
                                string[] sArray = line.Split(';');
                                int[] num = new int[3];
                                num[0] = int.Parse(sArray[0]);
                                num[1] = int.Parse(sArray[1]);
                                num[2] = int.Parse(sArray[2]);
                                sArray[3] = sArray[3].Replace("-", "");
                                sArray[4] = sArray[4].Replace("-", "");
                                int sum1 = 0, sum2 = 0;
                                sum1 = num[1] - num[0];
                                //if (sum1 <= 0)
                                //    continue;
                                sum2 = num[2] - num[1];
                                //if (sum2 <= 0)
                                //    continue;
                                if (sum1 > 0 && sum2 > 0 && naglowki_ != 0)
                                {
                                    data_zakupu = sArray[0] + "00";
                                    data_obioru_przez_kuriera = sArray[1] + "00";
                                    data_dostarczenia = sArray[2] + "00";
                                    ilosc_godzin = sum2;
                                    //sum1 = sum1 / 36;
                                    //sum2 = sum2 / 36;
                                    line = sum1.ToString() + "00;" + sum2.ToString() + "00;"
                                        + sArray[3] + ";" + sArray[4] + ";" + sArray[5];
                                    sw.WriteLine(line);
                                }
                                else
                                    continue;
                            }
                            else if (naglowki_ == 0)
                            {
                                line = "TIME_BEFORE_COURIER_GET_PACKAGE;TIME_TO_DELIVER;ZIP_RECEIVER;ZIP_SENDER;DISTANCE";
                                sw.WriteLine(line);
                            }
                            naglowki_ = 1;
                            //line = line.Replace("-", "");
                            //sw.WriteLine(line);
                        }
                    }
                    catch (Exception e)
                    {
                        System.Console.WriteLine("Jakis error " + e.Message);
                        System.Console.WriteLine("Nacisjnij cokolwiek by probowac kontynuowac");
                        Console.ReadKey();
                    }
                }
            }
        }

        private static void CrateOutputFile(string path)
        {
            // Create a file to write to.
            using (StreamWriter sw = File.CreateText(path))
            {
                sw.Write("");
            }
        }

        public static void CreateModel()
        {
            // Load Data
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: TRAIN_DATA_FILEPATH,
                                            hasHeader: true,
                                            separatorChar: ';',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);

            // Evaluate quality of Model
            Evaluate(mlContext, trainingDataView, trainingPipeline);

            // Train Model
            ITransformer mlModel = TrainModel(mlContext, trainingDataView, trainingPipeline);

            // Save model
            SaveModel(mlContext, mlModel, MODEL_FILEPATH, trainingDataView.Schema);
        }

        public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = mlContext.Transforms.Concatenate("Features", new[] { "TIME_BEFORE_COURIER_GET_PACKAGE", "ZIP_RECEIVER", "ZIP_SENDER", "DISTANCE" });
            // Set the training algorithm 
            var trainer = mlContext.Regression.Trainers.FastTree(new FastTreeRegressionTrainer.Options() { NumberOfLeaves = 106, MinimumExampleCountPerLeaf = 50, NumberOfTrees = 500, LearningRate = 0.06704006f, Shrinkage = 1.087633f, LabelColumnName = "TIME_TO_DELIVER", FeatureColumnName = "Features" });

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            return trainingPipeline;
        }

        public static ITransformer TrainModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            Console.WriteLine("=============== Training  model ===============");

            ITransformer model = trainingPipeline.Fit(trainingDataView);

            Console.WriteLine("=============== End of training process ===============");
            return model;
        }

        private static void Evaluate(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
            var crossValidationResults = mlContext.Regression.CrossValidate(trainingDataView, trainingPipeline, numberOfFolds: 5, labelColumnName: "TIME_TO_DELIVER");
            PrintRegressionFoldsAverageMetrics(crossValidationResults);
        }

        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath, DataViewSchema modelInputSchema)
        {
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($"=============== Saving the model  ===============");
            mlContext.Model.Save(mlModel, modelInputSchema, GetAbsolutePath(modelRelativePath));
            Console.WriteLine("The model is saved to {0}", GetAbsolutePath(modelRelativePath));
        }

        public static string GetAbsolutePath(string relativePath)
        {
            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }

        public static void PrintRegressionMetrics(RegressionMetrics metrics)
        {
            Console.WriteLine($"*************************************************");
            Console.WriteLine($"*       Metrics for Regression model      ");
            Console.WriteLine($"*------------------------------------------------");
            Console.WriteLine($"*       LossFn:        {metrics.LossFunction:0.##}");
            //Console.WriteLine($"*       R2 Score:      {metrics.RSquared:0.##}");
            Console.WriteLine($"*       Absolute loss: {metrics.MeanAbsoluteError:#.##}");
            Console.WriteLine($"*       Squared loss:  {metrics.MeanSquaredError:#.##}");
            Console.WriteLine($"*       RMS loss:      {metrics.RootMeanSquaredError:#.##}");
            Console.WriteLine($"*************************************************");
        }

        public static void PrintRegressionFoldsAverageMetrics(IEnumerable<TrainCatalogBase.CrossValidationResult<RegressionMetrics>> crossValidationResults)
        {
            var L1 = crossValidationResults.Select(r => r.Metrics.MeanAbsoluteError);
            var L2 = crossValidationResults.Select(r => r.Metrics.MeanSquaredError);
            var RMS = crossValidationResults.Select(r => r.Metrics.RootMeanSquaredError);
            var lossFunction = crossValidationResults.Select(r => r.Metrics.LossFunction);
            var R2 = crossValidationResults.Select(r => r.Metrics.RSquared);

            Console.WriteLine($"*************************************************************************************************************");
            Console.WriteLine($"*       Metrics for Regression model      ");
            Console.WriteLine($"*------------------------------------------------------------------------------------------------------------");
            Console.WriteLine($"*       Average L1 Loss:       {L1.Average():0.###} ");
            Console.WriteLine($"*       Average L2 Loss:       {L2.Average():0.###}  ");
            Console.WriteLine($"*       Average RMS:           {RMS.Average():0.###}  ");
            Console.WriteLine($"*       Average Loss Function: {lossFunction.Average():0.###}  ");
            //Console.WriteLine($"*       Average R-squared:     {R2.Average():0.##}  ");
            Console.WriteLine($"*************************************************************************************************************");
        }


        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ';',
                                            allowQuoting: true,
                                            allowSparse: false);

            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false).First();

            return sampleForPrediction;
        }
        ////////////////////////////////////////////////////////////////////////////////////////
        private static int ConvertTry(long startindex, string path, string outputPath)
        {
            Console.WriteLine("Rozpoczynam od " + startindex);
            int breakcount = 100;
            using (StreamReader sr = File.OpenText(path))
            {
                using (StreamWriter sw = File.AppendText(outputPath))
                {
                    string line = "";
                    try
                    {
                        for (int a = 0; a < startindex; a++)
                        {
                            sr.ReadLine();
                        }

                        while ((line = sr.ReadLine()) != null)
                        {
                            counter++;
                            if (counter % 100 == 0)
                            {
                                //Console.WriteLine("Przerobiono " + counter);                                
                            }

                            if (line.Contains("NULL"))
                            {
                                continue;
                            }

                            string fixedLine = FixLine(line);
                            if (fixedLine != null)
                            {
                                sw.WriteLine(fixedLine);
                                //Console.WriteLine(fixedLine);
                                breakcount--;
                                if (breakcount < 0)
                                {
                                    break;
                                }
                            }
                        }
                        System.Console.WriteLine("There were {0} lines.", counter);
                        System.Console.WriteLine("Ukonczono pomyslnie");
                        System.Console.WriteLine("Nacisjnij cokolwiek by zamknac program");
                        Console.ReadKey();
                    }
                    catch (Exception e)
                    {
                        System.Console.WriteLine("Jakis error " + e.Message);
                        System.Console.WriteLine(counter + " Linia: " + line + " :Koniec.");
                        System.Console.WriteLine("Nacisjnij cokolwiek by probowac kontynuowac");
                        Console.ReadKey();
                    }
                }
            }
            Console.WriteLine("Convert stop");
            return 0;
        }

        private static string FixLine(string line)
        {
            string fixedLine = "";
            int debugMax = 0, result;
            float result_float;
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            long centuryBegin = new DateTime(2001, 1, 1).Ticks;
            bool isNumber;

            try
            {
                //SPEEDUPER.EXE
                string[] temporino;
                temporino = line.Split("PL");
                if (temporino.Length != 3)
                {
                    //Console.WriteLine("Nie jest pl -> pl");
                    return null;
                }

                string tempLine = "";
                //1 SHIPMENT_IDENTCODE
                line = line.Substring(dlugosciNaglowkow[0], line.Length - dlugosciNaglowkow[0]);

                //2 SHIPMENT_CREATEDATE
                tempLine = line.Substring(0, dlugosciNaglowkow[1] - 5);
                DateTime date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);//tylko godziny z danej daty - nie musimy znaæ czasu dostawy co do sekundy
                tempLine = ConvertToUnixTimestamp(date).ToString();//konwertowanie nie do ticków (du¿a liczba) a do czasu unixowego
                isNumber = Int32.TryParse(tempLine, out result);
                if (!isNumber)
                {
                    //Console.WriteLine("createdate nie jest liczba");
                    //Console.ReadKey();
                    return null;
                }


                string createDate = tempLine;

                line = line.Substring(dlugosciNaglowkow[1], line.Length - dlugosciNaglowkow[1]);

                //3 FIRST_EVENT
                tempLine = line.Substring(0, dlugosciNaglowkow[2] - 5);
                date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);
                tempLine = ConvertToUnixTimestamp(date).ToString();
                isNumber = Int32.TryParse(tempLine, out result);
                if (!isNumber)
                {
                    //Console.WriteLine("firstevent nie jest liczba");
                    //Console.ReadKey();
                    return null;
                }

                string firstEvent = tempLine;

                line = line.Substring(dlugosciNaglowkow[2], line.Length - dlugosciNaglowkow[2]);

                //4 LAST_EVENT
                tempLine = line.Substring(0, dlugosciNaglowkow[3] - 5);
                date = DateTime.ParseExact(tempLine, dateFormat, System.Globalization.CultureInfo.InvariantCulture);
                date = date.AddMinutes(-date.Minute).AddSeconds(-date.Second);
                tempLine = ConvertToUnixTimestamp(date).ToString();
                isNumber = Int32.TryParse(tempLine, out result);
                if (!isNumber)
                {

                    //Console.WriteLine("lastevent nie jest liczba");
                    //Console.ReadKey();
                    return null;
                }

                string lastEvent = tempLine;

                line = line.Substring(dlugosciNaglowkow[3], line.Length - dlugosciNaglowkow[3]);

                //5 RECIEVER_ZIP
                tempLine = line.Substring(0, dlugosciNaglowkow[4]);
                tempLine = tempLine.Replace(" ", "");
                string receiverZIP = tempLine;

                tempLine = tempLine.Replace("-", "");
                string receiverZIPString = tempLine;

                line = line.Substring(dlugosciNaglowkow[4], line.Length - dlugosciNaglowkow[4]);

                //6 RECEIVER_COUNTRY_ISO2
                line = line.Substring(dlugosciNaglowkow[5], line.Length - dlugosciNaglowkow[5]);

                //7 SENDER_ZIP
                tempLine = line.Substring(0, dlugosciNaglowkow[6]);
                tempLine = tempLine.Replace(" ", "");
                string senderZIP = tempLine;

                tempLine = tempLine.Replace("-", "");
                string senderZIPString = tempLine;

                line = line.Substring(dlugosciNaglowkow[6], line.Length - dlugosciNaglowkow[6]);

                //8 SENDER_COUNTRY_ISO2
                line = line.Substring(dlugosciNaglowkow[7], line.Length - dlugosciNaglowkow[7]);

                //9 DISTANCE
                tempLine = line.Substring(0, dlugosciNaglowkow[8]);

                tempLine = DistanceBetweenTwoZIP(receiverZIP, senderZIP);
                //tempLine = tempLine.Replace(",", ".");
                //tempLine = "123,333";

                isNumber = Single.TryParse(tempLine, out float f_result);
                if (!isNumber)
                {
                    //Console.WriteLine(tempLine);
                    //Console.ReadKey();
                    return null;
                }
                else
                {
                    if (f_result > 900 || f_result < 0.1)
                    {
                        //Console.WriteLine("Precyzja");
                        //Console.ReadKey();
                        return null;
                    }
                }
                string distance = tempLine;

                int[] num = new int[3];
                num[0] = int.Parse(createDate);
                num[1] = int.Parse(firstEvent);
                num[2] = int.Parse(lastEvent);
                int diff1 = 0, diff2 = 0;
                diff1 = num[1] - num[0];
                diff2 = num[2] - num[1];
                if (diff1 > 0 && diff2 > 0)
                {
                    fixedLine = diff1.ToString() + ";" + diff2.ToString() + ";" + receiverZIPString + ";"
                        + senderZIPString + distance;
                }
                else
                {
                    //Console.WriteLine("Roznice");
                    //Console.ReadKey();
                    return null;
                }
            }
            catch (Exception ex)
            {
                if (counter < debugMax)
                {
                    System.Console.WriteLine("Exception: " + ex.Message);
                    System.Console.WriteLine(line);
                }
                return null;
            }
            return fixedLine;
        }
    }

    public class UnitOfLength
    {
        public static UnitOfLength Kilometers = new UnitOfLength(1.609344);
        public static UnitOfLength NauticalMiles = new UnitOfLength(0.8684);
        public static UnitOfLength Miles = new UnitOfLength(1);

        private readonly double _fromMilesFactor;

        private UnitOfLength(double fromMilesFactor)
        {
            _fromMilesFactor = fromMilesFactor;
        }

        public double ConvertFromMiles(double input)
        {
            return input * _fromMilesFactor;
        }
    }
    public static class CoordinatesDistanceExtensions
    {
        public static double DistanceTo(this Coordinates baseCoordinates, Coordinates targetCoordinates)
        {
            return DistanceTo(baseCoordinates, targetCoordinates, UnitOfLength.Kilometers);
        }

        public static double DistanceTo(this Coordinates baseCoordinates, Coordinates targetCoordinates, UnitOfLength unitOfLength)
        {
            var baseRad = Math.PI * baseCoordinates.Latitude / 180;
            var targetRad = Math.PI * targetCoordinates.Latitude / 180;
            var theta = baseCoordinates.Longitude - targetCoordinates.Longitude;
            var thetaRad = Math.PI * theta / 180;

            double dist =
                Math.Sin(baseRad) * Math.Sin(targetRad) + Math.Cos(baseRad) *
                Math.Cos(targetRad) * Math.Cos(thetaRad);
            dist = Math.Acos(dist);

            dist = dist * 180 / Math.PI;
            dist = dist * 60 * 1.1515;

            return unitOfLength.ConvertFromMiles(dist);
        }
    }
    public class Coordinates
    {
        public double Latitude { get; private set; }
        public double Longitude { get; private set; }

        public Coordinates(double latitude, double longitude)
        {
            Latitude = latitude;
            Longitude = longitude;
        }
    }
}
